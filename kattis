#!/usr/bin/env python

"""
Kattis Command Line Tools

This command line interface allows users to interact with open.kattis.com in a
more convenient manner.

Current features include:

- new:   Provisions a problem directory by downloading sample data,
         standardizing their filenames, and creating a default solution file.

- test:  Tests a Kattis problem (i.e. compares a solution file's output to the
         the expected output given in a problem's sample data).
"""

import argparse
import io
import os
import sys
import zipfile

from subprocess import Popen, PIPE

import requests
import yaml


class Config():
    """A data class to help manage user configuration values."""

    def __init__(self):
        '''
        Search for the user config file in the following order:
        - The user's home directory
        - A location specified by the environment variable KATTIS_CONF

        When it's found, load its values and store them in a dict.
        '''
        self.values = None
        for directory in os.path.expanduser('~'), os.environ.get("KATTIS_CONF"):
            try:
                config_path = os.path.join(directory, '.kattis.yaml')
                with open(config_path) as config_file:
                    try:
                        self.values = yaml.safe_load(config_file)
                    except yaml.YAMLError as exc:
                        # ensure config file is well-formed
                        print("Error found in .kattis.yaml.\nPlease ensure "
                              "that your configuration file is well-formed.")
                        sys.exit(1)
                break

            except (TypeError, FileNotFoundError):
                # TypeError catches undefined environment variable
                pass

        # TODO: Handle missing config files
        if self.values is None:
            print("A configuration file could not be located.")
            sys.exit(1)


class Colors():
    """A data class that holds ANSI escape sequences, which are used to
    colourize terminal output.
    """
    BOLD = '\033[1m'
    RESET = '\033[0m'
    GREEN = '\033[92m'
    RED = '\033[91m'


class Kattis():
    """A utility class that uses argparse to run different commands."""

    def __init__(self):
        self.config = Config()
        self.kattis_directory = self.config.values['kattis_directory']
        self.default_extension = self.config.values['default_extension']
        self.default_run_command = self.config.values['default_run_command']

        parser = argparse.ArgumentParser(
            usage='''kattis <command> [<args>]

Commands:
    new     Provisions a problem directory by downloading sample data,
            standardizing their filenames, and creating a default solution
            file.

    test    Tests a Kattis problem (i.e. compares a solution file's outputs to
            the expected outputs given in a problem's sample data).
''')
        parser.add_argument('command')

        # display help if a command hasn't been provided
        if len(sys.argv) == 1:
            parser.print_usage()
            sys.exit(1)

        # ensure the provided command exists
        args = parser.parse_args(sys.argv[1:2])
        if not hasattr(self, args.command):
            parser.print_usage()
            print("\nInvalid command. "
                  "Please choose a command from the list above.")
            sys.exit(1)

        # invoke the valid command's corresponding method
        getattr(self, args.command)()

    def new(self):
        """For a given Kattis problem, obtains sample data, standardizes their
        filenames, and creates a default solution file.
        """
        parser = argparse.ArgumentParser(usage='''kattis new <problem_id>

Arguments:
    problem_id - A valid Kattis Problem ID. Problem IDs can be found in the
                 top-right corner of a problem's description page on
                 open.kattis.com.

''')
        parser.add_argument('problem_id')

        # ensure that a single problem_id has been provided
        if len(sys.argv) != 3:
            parser.print_usage()
            print("\nPlease provide a single Problem ID.")
            sys.exit(1)

        # parse args to get Problem ID
        args = parser.parse_args(sys.argv[2:])
        problem = Problem(args.problem_id, self.kattis_directory)
        print("Problem ID: {}\nProblem URL: {}\n".format(problem.problem_id,
                                                         problem.url))

        # verify that the given problem exists on open.kattis.com
        problem.confirm_problem_exists()

        # download problem sample data
        problem.download_sample_data()

        # standardize sample data filenames
        problem.standardize_sample_data()

    def test(self):
        """Tests a Kattis problem (i.e. compares a solution file's output to
        the expected output given in a problem's sample data).
        """
        parser = argparse.ArgumentParser(usage='''kattis test <problem_id>

Arguments:
    problem_id - A valid Kattis Problem ID. Problem IDs can be found in the
                 top-right corner of a problem's description page on
                 open.kattis.com.
''')
        parser.add_argument('problem_id')

        # ensure that a single problem_id has been provided
        if len(sys.argv) != 3:
            parser.print_usage()
            print("\nPlease provide a single Problem ID.")
            sys.exit(1)

        # parse args to get Problem ID
        args = parser.parse_args(sys.argv[2:])
        problem = Problem(args.problem_id, self.kattis_directory)
        print("{}Testing '{}'.{}\n".format(Colors.BOLD,
                                           problem.problem_id,
                                           Colors.RESET))

        solution_file = '{}/{}{}'.format(problem.directory,
                                         problem.problem_id,
                                         self.default_extension)

        # ensure solution file exists
        if not os.path.exists(solution_file):
            print("Solution file not found. Are you using the extension "
                  "defined in the config file?")
            sys.exit(1)

        # get sample data files
        input_files, output_files = problem.get_sample_data_files()

        # run the solution file against each test case
        passed = 0
        for i, input_file in enumerate(input_files):
            solution_output = Popen('{} {} < {}'.format(self.default_run_command,
                                                        solution_file,
                                                        input_file),
                                    shell=True,
                                    stdout=PIPE)
            expected_output = Popen('cat {}'.format(output_files[i]),
                                    shell=True,
                                    stdout=PIPE)
            solution_output = solution_output.communicate()[0].decode()
            expected_output = expected_output.communicate()[0].decode()

            # print test results
            if solution_output == expected_output:
                print("{}{} passed! ✓{}".format(Colors.GREEN,
                                                input_file,
                                                Colors.RESET))
                passed += 1
            else:
                print("{}{} failed! ✗{}".format(Colors.RED,
                                                input_file,
                                                Colors.RESET))
                print("Expected output:\n{}".format(expected_output))
                print("Solution output:\n{}".format(solution_output))
        if passed < len(input_files):
            print("{}{}/{} test cases passed.{}".format(Colors.RED,
                                                        passed,
                                                        len(input_files),
                                                        Colors.RESET))
        else:
            print("\n{}All test cases passed.{}".format(Colors.GREEN,
                                                        Colors.RESET))

        sys.exit(1)


class Problem():
    """
    Represents a Kattis problem.

    Args:
        problem_id (str): The problem's ID on open.kattis.com

    Attributes:
        url (str): The URL for the problem's description page
        directory (str): The local directory where problem data is stored
    """

    def __init__(self, problem_id, kattis_directory):
        self.problem_id = problem_id
        self.url = 'https://open.kattis.com/problems/' + self.problem_id
        self.directory = "{}/{}".format(os.path.expanduser(kattis_directory),
                                        self.problem_id)

    def confirm_problem_exists(self):
        """Confirms that the problem actually exists on open.kattis.com."""
        r = requests.get(self.url)
        if r.status_code == 404:
            print("Problem not found.\nPlease confirm that you have entered a "
                  "valid Kattis Problem ID.")
            sys.exit(1)
        r.raise_for_status()  # catch other errors

    def download_sample_data(self):
        """Downloads problem's sample data and places them in the problem's
        directory.
        """
        print("Downloading sample data files to: \n{}\n".format(self.directory))

        # abort download if the problem directory already exists
        if os.path.isdir(self.directory):
            print("WARNING: Problem directory already exists. "
                  "Download aborted.")
            sys.exit(1)

        # attempt to download the sample data .zip
        sample_data_url = self.url + '/file/statement/samples.zip'
        r = requests.get(sample_data_url)
        if r.ok:
            # unzip the sample data and place them in the problem directory
            file = zipfile.ZipFile(io.BytesIO(r.content))
            file.extractall(self.directory)
            print("Download complete.\n")
        else:
            print('''There was an error downloading the sample data.
Do the samples follow the usual Kattis format? Some problems, such as those
related to machine learning, handle sample data differently.
Please download these problems' data manually.''')
            sys.exit(1)

    def standardize_sample_data(self):
        """Attempts to standardize the sample data's filenames.

        Kattis problems' sample data don't use standard filenames, which can
        sometimes be annoying when trying to pass them into your solution.

        This method attempts to enumerate the sample data in the order that
        they are given, in order to make testing problem solutions more convenient.

        Almost all Kattis problems' input files use the '.in' extension. This
        method will fail if a different extension is used.
        """
        print("Standardizing filenames...\n")

        # attempt to determine which file extensions are used for input/output
        files = os.listdir(self.directory)
        input_files = sorted([file for file in files if file.endswith('.in')])

        if not input_files:
            print("Unable to standardize sample data. "
                  "Do the sample inputs end in '.in' ?")
            return

        output_files = sorted([file for file in files
                               if not file.endswith('.in')])

        # rename input files
        for i, file in enumerate(input_files):
            os.rename('{}/{}'.format(self.directory, file),
                      '{}/{}.in'.format(self.directory, i + 1))

        # rename output files
        for i, file in enumerate(output_files):
            os.rename('{}/{}'.format(self.directory, file),
                      '{}/{}.ans'.format(self.directory, i + 1))

        print("Standardization complete.")

    def get_sample_data_files(self):
        """Get the names of the sample data's input and output files."""
        try:
            files = [('{}/{}'.format(self.directory, file)) for file in os.listdir(self.directory)]
            # extract standardized sample data
            input_files = sorted(list(filter(lambda file: file[-3:] == '.in', files)))
            output_files = sorted(list(filter(lambda file: file[-4:] == '.ans', files)))
            return input_files, output_files

        except FileNotFoundError:
            print("Problem not found. Please ensure the problem directory and "
                  "sample data exists.")
            sys.exit(1)


if __name__ == '__main__':
    Kattis()
