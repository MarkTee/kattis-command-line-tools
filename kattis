#!/usr/bin/env python

"""
Kattis Command Line Tools

This command line interface allows users to interact with Kattis.com in a more
convenient manner.

Current features include:

- setup: Provisions a problem directory by downloading sample data,
         standardizing their filenames, and creating a default solution file.
"""

import argparse
import io
import os
import sys
import zipfile

import requests
import yaml

class Kattis():
    '''
    Use argparse to allow the user to easily interact with Kattis.com
    '''

    def __init__(self):
        parser = argparse.ArgumentParser(
            usage='''kattis <command> [<args>]

Commands:
    setup    Provisions a problem directory by downloading sample data,
             standardizing their filenames, and creating a default solution
             file.
''')
        parser.add_argument('command')

        # display help if a command hasn't been provided
        if len(sys.argv) == 1:
            parser.print_usage()
            sys.exit(1)

        # ensure the provided command exists
        args = parser.parse_args()
        if not hasattr(self, args.command):
            parser.print_usage()
            print("\nInvalid command. "
                  "Please choose a command from the list above.")
            sys.exit(1)

        # invoke the valid command's corresponding method
        getattr(self, args.command)()

    def setup(self):
        '''Obtains sample data from Kattis.com for a given problem'''
        parser = argparse.ArgumentParser(usage='''kattis setup <problem_id>

Arguments:
    problem_id - A valid Kattis Problem ID. Problem IDs can be found in the
                top-right corner of a problem's description page.

''')
        parser.add_argument('problem_id', type=str)

        # ensure that only a single problem_id has been provided
        if len(sys.argv) != 3:
            parser.print_usage()
            print("\nPlease provide a single Problem ID.")
            exit(1)

        # parse args to get Problem ID
        args = parser.parse_args(sys.argv[2:])
        problem = Problem(args.problem_id)
        print('''Problem ID: {}\nProblem URL: {}\n'''.format(problem.id,
                                                             problem.url))

        # verify that the given problem exists on Kattis
        problem.confirm_problem_exists()

        # download sample data
        problem.download_sample_data()

        # standardize sample data filenames
        problem.standardize_sample_data()


class Problem():
    '''
    Represents a problem on Kattis.com

    Args:
        problem_id (str): The Problem's ID on Kattis.com

    Attributes:
        url (str): The URL for the problem's description page
        directory (str): The local directory where problem data is stored
    '''

    def __init__(self, problem_id):
        self.id = problem_id
        self.url = 'https://open.kattis.com/problems/' + self.id
        self.directory = "{}/{}".format(os.getcwd(), self.id)

        # attempt to read config file for use in setup
        # kattis_config = os.path.dirname(os.path.realpath(__file__)) + '/kattis.yaml'
        # with open(kattis_config, 'r') as stream:
        #     try:
        #         for key, value in yaml.safe_load(stream):
        #             print(key, value)
        #     except yaml.YAMLError as exc:
        #         print(exc)

        # print(type(config_values))
        # print(config_values[kattis_directory])
        # print(config_values[default_extension])

    def confirm_problem_exists(self):
        '''Confirms that the problem actually exists on Kattis.com'''
        r = requests.get(self.url)
        if r.status_code == 404:
            print("404 Error Received. "
                  "Please confirm that you have entered a valid "
                  "Kattis Problem ID.")
            exit(1)
        r.raise_for_status()  # catch other errors

    def download_sample_data(self):
        '''Downloads problem's sample data and places them in the problem
        directory
        '''
        print("Downloading sample data files to: "
              "\n{}\n".format(self.directory))

        # abort download if the problem directory already exists
        if os.path.isdir(self.directory):
            print("WARNING: Problem directory already exists. "
                  "Download aborted.")
            exit(1)

        # attempt to download the sample data .zip
        sample_data_url = self.url + '/file/statement/samples.zip'
        r = requests.get(sample_data_url)
        if r.ok:
            # unzip the sample data and place them in the problem directory
            file = zipfile.ZipFile(io.BytesIO(r.content))
            file.extractall(self.directory)
            print("Download complete.\n")
        else:
            print('''There was an error downloading the sample data.
Do the samples follow the standard Kattis format? Some problems, such as those
related to machine learning, handle sample data differently.
Please download these problems manually.''')
            exit(1)

    def standardize_sample_data(self):
        '''Attempts to standardize the sample data's filenames

        Kattis problems' sample data don't use standard filenames, which can
        sometimes be annoying when trying to pass them into your solution.

        This method attempts to enumerate the sample data in the order that
        they are given, in order to make testing problem solutions more
        convenient.
        '''
        print("Standardizing filenames...\n")

        # attempt to determine which file extensions are used for input/output
        files = os.listdir(self.directory)
        input_files = sorted([file for file in files if file.endswith('.in')])

        if not input_files:
            print("Unable to standardize sample data. "
                  "Do the sample inputs end in '.in' ?")
            return

        output_files = sorted([file for file in files
                               if not file.endswith('.in')])

        # rename input files
        for i, file in enumerate(input_files):
            os.rename("{}/{}".format(self.directory, file),
                      '{}/{}.in'.format(self.directory, i + 1))

        # rename output files
        for i, file in enumerate(output_files):
            os.rename("{}/{}".format(self.directory, file),
                      '{}/{}.ans'.format(self.directory, i + 1))

        print("Standardization complete.")


if __name__ == '__main__':
    Kattis()
