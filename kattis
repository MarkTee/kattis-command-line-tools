#!/usr/bin/env python

import argparse
import os
import requests
import sys

class Kattis(object):

    def __init__(self):
        parser = argparse.ArgumentParser(
            usage='''kattis <command> [<args>]

Commands:
    get       Create a directory containing a problem's sample data files
''')

        parser.add_argument('command')

        # display help if a command hasn't been provided
        if len(sys.argv) == 1:
            parser.print_usage()
            exit(1)

        # ensure the provided command exists
        args = parser.parse_args(sys.argv[1:2])
        if not hasattr(self, args.command):
            parser.print_usage()
            print("\nInvalid command. Please choose a command from the list above.")
            exit(1)

        # invoke the valid command's corresponding method
        getattr(self, args.command)()

    def get(self):
        parser = argparse.ArgumentParser(usage='''kattis get <problemid>

Arguments:
    problemid - A valid Kattis Problem ID. Problem IDs can be found in the
                top-right corner of a problem's description page.

''')

        parser.add_argument('problemid', type=str)

        # ensure that only a single problemid has been provided
        if len(sys.argv) != 3:
            parser.print_usage()
            print("\nPlease provide a single Problem ID.")
            exit(1)

        # parse args to get problemid
        args = parser.parse_args(sys.argv[2:])
        problem_id = args.problemid
        problem_url = 'https://open.kattis.com/problems/{}'.format(problem_id)
        print('''Problem ID: {}\nProblem URL: {}\n'''.format(problem_id, problem_url))

        # verify that the given problem exists
        r = requests.get(problem_url)
        if r.status_code == 404:
            print('404 Error Received. Please confirm that you have entered a valid Kattis Problem ID.')
            exit(1)
        r.raise_for_status() # catch other errors


if __name__ == '__main__':
    Kattis()
